/*0 ~ 999999 사이의 수를 나열하여 만든 암호문이 있다.

암호문을 급히 수정해야 할 일이 발생했는데, 이 암호문은 특수 제작된 처리기로만 수정이 가능하다.

이 처리기는 다음과 같이 3개의 기능을 제공한다.
 
1. I(삽입) x, y, s : 앞에서부터 x의 위치 바로 다음에 y개의 숫자를 삽입한다. s는 덧붙일 숫자들이다.[ ex) I 3 2 123152 487651 ]

2. D(삭제) x, y : 앞에서부터 x의 위치 바로 다음부터 y개의 숫자를 삭제한다.[ ex) D 4 4 ]

3. A(추가) y, s : 암호문의 맨 뒤에 y개의 숫자를 덧붙인다. s는 덧붙일 숫자들이다. [ ex) A 2 421257 796813 ]

위의 규칙에 맞게 작성된 명령어를 나열하여 만든 문자열이 주어졌을 때, 암호문을 수정하고, 수정된 결과의 처음 10개 숫자를 출력하는 프로그램을 작성하여라.

[입력]

첫 번째 줄 : 원본 암호문의 길이 N ( 2000 ≤ N ≤ 4000 의 정수)

두 번째 줄 : 원본 암호문

세 번째 줄 : 명령어의 개수 ( 250 ≤ N ≤ 500 의 정수)

네 번째 줄 : 명령어

위와 같은 네 줄이 한 개의 테스트 케이스이며, 총 10개의 테스트 케이스가 주어진다.

[출력]

#기호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 수정된 암호문의 처음 10개 항을 출력한다.*/
#include <iostream>
#include <vector>

using namespace std;


int main()
{
	int n;//testcase
	for (int n = 1; n < 11; n++)
	{
		vector<int> arr;//벡터로 배열을 만들어 길이의 제한을 없앤다
		vector<int>::iterator it;//iterator선언
		int len;//원본암호문의 길이
		cin >> len;
		for (int i = 0; i < len; i++)
		{
			int data;//원본암호
			cin >> data;
			arr.push_back(data);
		}
		int number;//명령어의 개수
		cin >> number;
		for (int i = 0; i < number; i++)
		{
			char l;
			int x, y;//x->위치 y->데이터의 숫자
			cin >> l;
			if (l == 'I')
			{
				cin >> x >> y;
				for (int k = 0; k < y; k++)
				{
					int data;
					cin >> data;
					it = arr.begin();//it 에 벡터의 처음값을 가리키게함 및 다시 초기화
					it = arr.insert(it + x + k, data);//원하는 위치에 data삽입
				}
			}
			else if(l == 'D')
			{
				cin >> x >> y;
				it = arr.begin();
				arr.erase(it + x, it + x + y);
			}
			else
			{
				cin >> x;
				for (int i = 0; i < x; i++)
				{
					int data;
					cin >> data;
					arr.push_back(data);
				}
			}
		}
		cout << "#" << n << " ";
		for (int i = 0; i < 10; i++)
			cout << arr.at(i) << " ";
	}
}

